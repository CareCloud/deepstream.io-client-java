plugins {
    id 'maven'
    id 'maven-publish'
    id 'java'
    id "com.jfrog.bintray" version "1.7"
    id 'com.github.j2objccontrib.j2objcgradle' version '0.6.0-alpha'
}

task client(type: Jar)

artifacts {
    archives client
}

defaultTasks 'build'

// Java compatability
sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    jcenter()
}

sourceSets {
    deepstreamTest {
        compileClasspath += sourceSets.main.runtimeClasspath
    }
}

dependencies {
    compile 'com.google.code.gson:gson:2.6.2'

    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile "org.mockito:mockito-core:1.+"
}

j2objcConfig {
    // Sets up libraries you depend on
    skipJ2objcVerification true
    autoConfigureDeps true
    supportedArchs += ['ios_i386']
    testPattern {
        include '**/*Test.java'
    }
    finalConfigure()          // Must be last call to configuration
}

group 'io.deepstream'
version '0.3'


publishing {
    publications {
        MyPublication(MavenPublication) {
            from components.java
            groupId 'io.deepstream'
            artifactId 'deepstream.io-client-java'
            version '0.3'
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')

    configurations = ['archives'] //When uploading configuration files

    dryRun = false //[Default: false] Whether to run this as dry-run, without deploying
    publish = true //[Default: false] Whether version should be auto published after an upload
    override = false //[Default: false] Whether to override version artifacts already published
    //Package configuration. The plugin will use the repo and name properties to check if the package already exists. In that case, there's no need to configure the other package properties (like userOrg, desc, etc).
    pkg {
        repo = 'maven'
        name = 'deepstream.io-client-java'
        userOrg = 'deepstreamio'
        desc = 'Java deepstream.io library'
        websiteUrl = 'https://deepstream.io/'
        issueTrackerUrl = 'https://github.com/deepstreamIO/deepstream.io-client-java/issues'
        vcsUrl = 'https://github.com/deepstreamIO/deepstream.io-client-java.git'
        licenses = ['Apache-2.0']
        labels = ['deepstream.io', 'data-sync', 'realtime', 'pubsub', 'rpc']
        publicDownloadNumbers = false

        githubRepo = 'https://github.com/deepstreamIO/deepstream.io-client-java'
        githubReleaseNotesFile = 'README.md'

        //Optional version descriptor
        version {
            name = '0.3'
            //desc = 'Release Reason'
            released = new Date()
            //vcsTag = '1.3.0'
            gpg {
                sign = true
            }
        }

        //Optional configuration for Maven Central sync of the version
        /* mavenCentralSync {
             sync = true //[Default: true] Determines whether to sync the version to Maven Central.
             user = 'userToken' //OSS user token: mandatory
             password = 'paasword' //OSS user password: mandatory
             close = '1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
         }*/
    }
}